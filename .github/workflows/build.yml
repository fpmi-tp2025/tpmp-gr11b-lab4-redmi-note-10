name: Build and Test Music Salon

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
            name: "Ubuntu Latest GCC",
            os: ubuntu-latest,
            build_type: "Release",
            cc: "gcc",
            cxx: "g++",
            generators: "Unix Makefiles"
          }
          - {
            name: "macOS Latest Clang",
            os: macos-latest,
            build_type: "Release",
            cc: "clang",
            cxx: "clang++",
            generators: "Unix Makefiles"
          }
          - {
            name: "Windows Latest MSVC",
            os: windows-latest,
            build_type: "Release",
            cc: "cl",
            cxx: "cl",
            generators: "Visual Studio 17 2022"
          }

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Environment
        shell: bash
        run: |
          echo "CC=${{ matrix.config.cc }}" >> $GITHUB_ENV
          echo "CXX=${{ matrix.config.cxx }}" >> $GITHUB_ENV

      - name: Install Linux Dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential libsqlite3-dev libssl-dev libgtest-dev nlohmann-json3-dev lcov
          
          # Build and install Google Test & Google Mock manually
          cd /usr/src/googletest
          sudo cmake .
          sudo make
          sudo cp lib/*.a /usr/lib
          sudo cp -r googletest/include/gtest /usr/include/
          sudo cp -r googlemock/include/gmock /usr/include/

      - name: Install macOS Dependencies
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install cmake sqlite openssl googletest nlohmann-json lcov

      - name: Install Windows Dependencies
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          # Use the pre-installed vcpkg on GitHub runners
          Write-Host "Using vcpkg at $env:VCPKG_INSTALLATION_ROOT"
          
          # Install required packages
          & "$env:VCPKG_INSTALLATION_ROOT\vcpkg" install sqlite3:x64-windows openssl:x64-windows gtest:x64-windows nlohmann-json:x64-windows

      - name: Create Build Environment
        run: cmake -E make_directory ${{ github.workspace }}/build

      - name: Configure CMake (Unix)
        if: runner.os != 'Windows'
        shell: bash
        working-directory: ${{ github.workspace }}/build
        run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }} -G "${{ matrix.config.generators }}" -DENABLE_COVERAGE=${{ runner.os == 'Linux' }}

      - name: Configure CMake (Windows)
        if: runner.os == 'Windows'
        shell: bash
        working-directory: ${{ github.workspace }}/build
        run: |
          cmake $GITHUB_WORKSPACE \
            -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }} \
            -G "${{ matrix.config.generators }}" \
            -DCMAKE_TOOLCHAIN_FILE="$VCPKG_INSTALLATION_ROOT/scripts/buildsystems/vcpkg.cmake"

      - name: Build
        working-directory: ${{ github.workspace }}/build
        shell: bash
        run: cmake --build . --config ${{ matrix.config.build_type }}

      - name: Test
        working-directory: ${{ github.workspace }}/build
        shell: bash
        run: ctest -C ${{ matrix.config.build_type }} --output-on-failure

      - name: Generate Coverage Report
        if: runner.os == 'Linux'
        working-directory: ${{ github.workspace }}
        run: |
          lcov --capture --directory ${{ github.workspace }}/build --output-file coverage.info
          lcov --remove coverage.info '/usr/*' --output-file coverage.info
          lcov --list coverage.info
          
          # Generate HTML report
          mkdir -p coverage-report
          genhtml coverage.info --output-directory coverage-report
          echo "Coverage report generated in coverage-report directory"

      - name: Upload Coverage Report to Codecov
        if: runner.os == 'Linux'
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          verbose: true

      - name: Upload Coverage HTML Report
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage-report/

      - name: Package
        working-directory: ${{ github.workspace }}/build
        shell: bash
        run: cpack -C ${{ matrix.config.build_type }}

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: music-salon-${{ runner.os }}
          path: |
            ${{ github.workspace }}/build/music_salon*
            ${{ github.workspace }}/build/*.deb
            ${{ github.workspace }}/build/*.dmg
            ${{ github.workspace }}/build/*.exe
            ${{ github.workspace }}/build/*.msi
            ${{ github.workspace }}/build/*.zip
            ${{ github.workspace }}/resources/
